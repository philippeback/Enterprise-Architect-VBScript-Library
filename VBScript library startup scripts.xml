<?xml version="1.0" encoding="windows-1252"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="1"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{24B8717D-8829-4db3-8403-CC1D276631BC}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TextFile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;!INC Utils.Include&#xA;&#xA;&#xA;Class TextFile&#xA;	Private m_FullPath&#xA;	Private m_Contents&#xA;	Private m_Folder&#xA;	Private m_FileName&#xA;&#xA;	Private Sub Class_Initialize&#xA;	  set m_Folder = Nothing&#xA;	  m_FileName = &quot;&quot;&#xA;	  m_Contents = &quot;&quot;&#xA;	End Sub&#xA;	&#xA;	' FullPath property.&#xA;	Public Property Get FullPath&#xA;	  FullPath = me.Folder.FullPath &amp; &quot;\&quot; &amp; me.FileName&#xA;	End Property&#xA;	public Property Let FullPath(value)&#xA;	  dim startBackslash&#xA;	  startBackslash = InstrRev(value, &quot;\&quot;, -1, 1)&#xA;	  me.Folder.FullPath = left(value, startBackslash -1) 'get everything before the last &quot;\&quot;&#xA;	  me.FileName = mid(value, startBackslash + 1) 'get everything after the last &quot;.&quot;&#xA;	end Property&#xA;		&#xA;	' Contents property.&#xA;	Public Property Get Contents&#xA;	  Contents = m_Contents&#xA;	End Property&#xA;	Public Property Let Contents(value)&#xA;	  m_Contents = value&#xA;	End Property&#xA;	&#xA;	' FileName property.&#xA;	Public Property Get FileName&#xA;	  FileName = m_FileName&#xA;	End Property&#xA;	Public Property Let FileName(value)&#xA;	  m_FileName = value&#xA;	End Property&#xA;	' FileNameWithoutExtension property.&#xA;	Public Property Get FileNameWithoutExtension&#xA;	  dim startExtension&#xA;	  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;	  FileNameWithoutExtension = left(me.FileName, startExtension -1) 'get everything before the last &quot;.&quot;&#xA;	End Property&#xA;	' Extension property.&#xA;	Public Property Get Extension&#xA;	  dim startExtension&#xA;	  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;	  Extension = mid(me.FileName, startExtension + 1) 'get everything after the last &quot;.&quot;&#xA;	End Property&#xA;	&#xA;	' Folder property.&#xA;	Public Property Get Folder&#xA;	  if m_Folder is nothing then&#xA;		set m_Folder = new FileSystemFolder&#xA;	  end if&#xA;	  set Folder = m_Folder&#xA;	End Property&#xA;	Public Property Let Folder(value)&#xA;	  set m_Folder = value&#xA;	End Property&#xA;	&#xA;&#xA;	sub Save&#xA;		Dim fso, MyFile&#xA;		Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;		'first make sure the directory exists&#xA;		me.Folder.Save&#xA;		'then create file&#xA;		Set MyFile = fso.CreateTextFile(me.FullPath, True)&#xA;		MyFile.Write(Contents)&#xA;		MyFile.close&#xA;	end sub&#xA;	&#xA;&#xA;	&#xA;end class&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="3"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Script Management"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="4"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Wrappers"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="5"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{41CC735E-AC5F-4f31-9306-5D3945721F31}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Scripting]&#xA;'[group=Wrappers]&#xA;&#xA;'option explicit&#xA;&#xA;&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'for some reason all scripts in the database have this value in the column scriptCategory&#xA;Const scriptCategory = &quot;605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F&quot;&#xA;&#xA;Class Script &#xA;	Private m_Name&#xA;	Private m_Code&#xA;	Private m_Group&#xA;	Private m_Id&#xA;	Private m_GUID&#xA;&#xA;	Private Sub Class_Initialize&#xA;	  m_Name = &quot;&quot;&#xA;	  m_Code = &quot;&quot;&#xA;	  m_Id = &quot;&quot;&#xA;	  set m_Group = Nothing&#xA;	End Sub&#xA;&#xA;	' Name property.&#xA;	Public Property Get Name&#xA;	  Name = m_Name&#xA;	End Property&#xA;	Public Property Let Name(value)&#xA;	  m_Name = value&#xA;	End Property&#xA;&#xA;	' Code property.&#xA;	Public Property Get Code&#xA;	  Code = m_Code&#xA;	End Property&#xA;	Public Property Let Code(value)&#xA;	  m_Code = value&#xA;	End Property&#xA;	&#xA;	' Id property.&#xA;	Public Property Get Id&#xA;	  Id = m_Id&#xA;	End Property&#xA;	Public Property Let Id(value)&#xA;	  m_Id = value&#xA;	End Property&#xA;	&#xA;	' GUID property.&#xA;	Public Property Get GUID&#xA;	  GUID = m_GUID&#xA;	End Property&#xA;	Public Property Let GUID(value)&#xA;	  m_GUID = value&#xA;	End Property	&#xA;	&#xA;	' Path property.&#xA;	Public Property Get Path&#xA;	  Path = getPathFromCode&#xA;	  if len(Path) &lt; 1 then&#xA;		Path = &quot;\&quot; &amp; me.Group.Name&#xA;	  end if&#xA;	End Property&#xA;&#xA;	' Group property.&#xA;	Public Property Get Group&#xA;	  set Group = m_Group&#xA;	End Property&#xA;	Public Property Let Group(value)&#xA;	  set m_Group = value&#xA;	  'add the script to the group&#xA;	   m_Group.Scripts.Add me&#xA;	End Property&#xA;	&#xA;	' GroupNameInCode property&#xA;	Public Property Get GroupInNameCode&#xA;	  GroupInNameCode = getGroupFromCode()&#xA;	End Property&#xA;&#xA;	&#xA;	' Gets all scripts stored in the model&#xA;	Public function getAllScripts(allGroups)&#xA;		dim resultArray, scriptGroup,row,queryResult&#xA;		set scriptGroup = new scriptGroup&#xA;		set allGroups = scriptGroup.getAllGroups()&#xA;		dim allScripts&#xA;		set allScripts = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;		dim sqlGet&#xA;		sqlGet = &quot;select s.ScriptID, s.Notes, s.Script,ps.Script as SCRIPTGROUP, ps.Notes as GROUPNOTES, ps.ScriptID as GroupID, ps.ScriptName as GroupGUID, s.ScriptName as ScriptGUID &quot; &amp; _&#xA;					 &quot; from t_script s &quot; &amp; _&#xA;					 &quot; inner join t_script ps on s.ScriptAuthor = ps.ScriptName &quot; &amp; _&#xA;					 &quot; where s.notes like '&lt;Script Name=&quot; &amp; getWC() &amp; &quot;'&quot;&#xA;        queryResult = Repository.SQLQuery(sqlGet)&#xA;		resultArray = convertQueryResultToArray(queryResult)&#xA;		dim id, notes, code, group, name, groupNotes, groupID, groupGUID, scriptGUID&#xA;		dim i&#xA;		For i = LBound(resultArray) To UBound(resultArray)&#xA;			id = resultArray(i,0)&#xA;			notes = resultArray(i,1)&#xA;			code = resultArray(i,2) &#xA;			group = resultArray(i,3)&#xA;			groupNotes = resultArray(i,4)&#xA;			groupID = resultArray(i,5)&#xA;			groupGUID = resultArray(i,6)&#xA;			scriptGUID = resultArray(i,7)&#xA;			if len(notes) &gt; 0 then&#xA;				'first get or create the group&#xA;				if allGroups.Exists(groupID) then&#xA;					set scriptGroup = allGroups(groupID)&#xA;				else&#xA;					set scriptGroup = new ScriptGroup&#xA;					scriptGroup.Name = group&#xA;					scriptGroup.Id = groupID&#xA;					scriptGroup.GUID = groupGUID&#xA;					scriptGroup.setGroupTypeFromNotes groupNotes&#xA;					'add the group to the dictionary&#xA;					allGroups.Add groupID, scriptGroup&#xA;				end if&#xA;				'then make the script&#xA;				name = getNameFromNotes(notes)&#xA;				dim script&#xA;				set script = New Script&#xA;				script.Id = id&#xA;				script.Name = name&#xA;				script.Code = code&#xA;				script.GUID = scriptGUID&#xA;				'add the group to the script&#xA;				script.Group = scriptGroup&#xA;				'add the script to the list&#xA;				allScripts.Add script&#xA;			end if&#xA;		next&#xA;		set getAllScripts = allScripts&#xA;	End function&#xA;	&#xA;	'the notes contain= &lt;Script Name=&quot;MyScriptName&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;	'so the name is the second part when splitted by double quotes&#xA;	private function getNameFromNotes(notes)&#xA;		dim parts&#xA;		parts = split(notes,&quot;&quot;&quot;&quot;)&#xA;		getNameFromNotes = parts(1)&#xA;	end function&#xA;	&#xA;	'the path is defined in the code as '[path=\directory\subdirectory]&#xA;	private function getPathFromCode()&#xA;		getPathFromCode = getKeyValue(&quot;path&quot;)&#xA;	end function&#xA;	'the Group is defined in the code as '[group=NameOfTheGroup]&#xA;	public function getGroupFromCode()&#xA;		getGroupFromCode = getKeyValue(&quot;group&quot;)&#xA;	end function&#xA;	&#xA;	'the key-value pair is defined in the code as '[keyName=value]&#xA;	public function getKeyValue(keyName)&#xA;		dim returnValue&#xA;		returnValue = &quot;&quot; 'initialise emtpy&#xA;		dim keyIndicator, startKey, endKey, tempValue&#xA;		keyIndicator = &quot;[&quot; &amp; keyName &amp; &quot;=&quot; &#xA;		startKey = instr(me.Code, keyIndicator) + len(keyIndicator)&#xA;		if startKey &gt; len(keyIndicator) then&#xA;			endKey = instr(startKey, me.Code, &quot;]&quot;)&#xA;			if endKey &gt; startKey then&#xA;				tempValue = mid(me.code,startKey, endKey - startKey)&#xA;				'filter out newline in case someone forgot to add the closing &quot;]&quot;&#xA;				if instr(tempValue,vbNewLine) = 0 and instr(tempValue,vbLF) = 0 then&#xA;					returnValue = tempValue&#xA;				end if&#xA;			end if&#xA;		end if&#xA;		getKeyValue = returnValue&#xA;	end function&#xA;	&#xA;	public function addGroupToCode()&#xA;		dim groupFromCode&#xA;		groupFromCode = me.getGroupFromCode()&#xA;		if not len(groupFromCode) &gt; 0 then&#xA;			'add the group indicator&#xA;			me.Code = &quot;'[group=&quot; &amp; me.Group.Name &amp; &quot;]&quot; &amp; vbNewLine &amp; me.Code&#xA;		end if&#xA;	end function&#xA;	&#xA;	&#xA;	'Insert the script in the database&#xA;	public sub Create&#xA;		dim sqlInsert&#xA;		sqlInsert = &quot;insert into t_script (ScriptCategory, ScriptName, ScriptAuthor, Notes, Script) &quot; &amp; _&#xA;					&quot; Values ('&quot; &amp; scriptCategory &amp; &quot;','&quot; &amp; me.GUID &amp; &quot;','&quot; &amp; me.Group.GUID &amp; &quot;','&lt;Script Name=&quot;&quot;&quot; &amp; me.Name &amp; &quot;&quot;&quot; Type=&quot;&quot;Internal&quot;&quot; Language=&quot;&quot;VBScript&quot;&quot;/&gt;','&quot; &amp; escapeSQLString(me.Code) &amp; &quot;')&quot;&#xA;		Repository.Execute sqlInsert&#xA;	end sub&#xA;	&#xA;	'update the script in the database&#xA;	public sub Update&#xA;		dim sqlUpdate&#xA;		sqlUpdate = &quot;update t_script set script = '&quot; &amp; escapeSQLString(me.Code) &amp; &quot;', ScriptAuthor = '&quot; &amp; me.Group.GUID &amp; _&#xA;					&quot;', Notes = '&lt;Script Name=&quot;&quot;&quot; &amp; me.Name &amp; &quot;&quot;&quot; Type=&quot;&quot;Internal&quot;&quot; Language=&quot;&quot;VBScript&quot;&quot;/&gt;' where ScriptName = '&quot; &amp; me.GUID &amp; &quot;'&quot;&#xA;		Session.Output sqlUpdate&#xA;		Repository.Execute sqlUpdate&#xA;	end sub&#xA;	&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="6"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6722BF4C-7A5E-4de7-9DE4-71F5EA164FDD}"/>
			<Column name="ScriptAuthor" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SaveAllScripts&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Tools\Script Management]&#xA;'[group=Script Management]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;' Author: Geert Bellekens&#xA;' Purpose: Saves all scripts in a given folder on the file system&#xA;' Date: 2015-12-07&#xA;'&#xA;sub main&#xA;	dim script&#xA;	set script = New Script&#xA;	dim allScripts, allGroups&#xA;	set allGroups = Nothing&#xA;	'get the folder from the user&#xA;	dim folder, shell&#xA;	Set shell  = CreateObject( &quot;Shell.Application&quot; )&#xA;    Set folder = new FileSystemFolder&#xA;	set folder = folder.getUserSelectedFolder(&quot;&quot;)&#xA;	if not folder is nothing then&#xA;		set allScripts = script.getAllScripts(allGroups)&#xA;		Session.Output &quot;allGroups.Count: &quot; &amp; allGroups.Count&#xA;	end if&#xA;	for each script in allScripts&#xA;		Session.Output &quot;filename: &quot; &amp; folder.FullPath &amp; script.Path &amp; &quot;\&quot; &amp; script.Name &amp; &quot;.vbs&quot;&#xA;		dim file&#xA;		set file = New TextFile&#xA;		file.FullPath = folder.FullPath &amp; script.Path &amp; &quot;\&quot; &amp; script.Name &amp; &quot;.vbs&quot;&#xA;		'first make sure the code indicator is added to the code&#xA;		script.addGroupToCode&#xA;		'then save the script with the group indicator&#xA;		file.Contents = script.Code&#xA;		file.Save&#xA;	next&#xA;end sub&#xA;&#xA;main&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="7"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D4328F95-DD46-493d-A629-B1A2E2BCF7A9}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers]&#xA;'[group=Wrappers]&#xA;&#xA;'include all individual scripts in this group&#xA;!INC Wrappers.Script&#xA;!INC Wrappers.ScriptGroup&#xA;'!INC Wrappers.TaggedValue&#xA;'include the util group&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="8"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C7667985-9405-4a84-B7A0-478D2C7DB659}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ScriptGroup&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Scripting]&#xA;'[group=Wrappers]&#xA;&#xA;&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;'constants for group type in database&#xA;Const gtNormal = &quot;NORMAL&quot;, gtProjectBrowser = &quot;PROJBROWSER&quot;, gtDiagram = &quot;DIAGRAM&quot;, gtWorkflow = &quot;WORKFLOW&quot;, _&#xA;  gtSearch = &quot;SEARCH&quot;, gtModelSearch = &quot;MODELSEARCH&quot;, gtContextElement = &quot;CONTEXTELEMENT&quot;, _&#xA;  gtContextPackage = &quot;CONTEXTPACKAGE&quot;, gtContextDiagram = &quot;CONTEXTDIAGRAM&quot;, gtContextLink = &quot;CONTEXTLINK&quot;&#xA;&#xA;'for some reason all groups have this value in column scriptCategory&#xA;Const scriptGroupCategory = &quot;3955A83E-9E54-4810-8053-FACC68CD4782&quot;&#xA;&#xA;Class ScriptGroup &#xA;	Private m_Id&#xA;	Private m_GUID&#xA;	Private m_Name&#xA;	Private m_GroupType&#xA;	Private m_Scripts&#xA;	&#xA;	Private Sub Class_Initialize&#xA;	  m_Id = &quot;&quot;&#xA;	  m_Name = &quot;&quot;&#xA;	  m_GroupType = &quot;&quot;&#xA;	  set m_Scripts = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;	End Sub&#xA;	&#xA;	' Id property.&#xA;	Public Property Get Id&#xA;	  Id = m_Id&#xA;	End Property&#xA;	Public Property Let Id(value)&#xA;	  m_Id = value&#xA;	End Property	&#xA;	&#xA;	' GUID property.&#xA;	Public Property Get GUID&#xA;	  GUID = m_GUID&#xA;	End Property&#xA;	Public Property Let GUID(value)&#xA;	  m_GUID = value&#xA;	End Property	&#xA;	&#xA;	' Name property.&#xA;	Public Property Get Name&#xA;	  Name = m_Name&#xA;	End Property&#xA;	Public Property Let Name(value)&#xA;	  m_Name = value&#xA;	End Property&#xA;&#xA;	' GroupType property.&#xA;	Public Property Get GroupType&#xA;	  GroupType = m_GroupType&#xA;	End Property&#xA;	Public Property Let GroupType(value)&#xA;	  m_GroupType = value&#xA;	End Property&#xA;	&#xA;	' Scripts property.&#xA;	Public Property Get Scripts&#xA;	  set Scripts = m_Scripts&#xA;	End Property&#xA;	&#xA;	'the notes contain something like &lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;	'so the group type is the second part when splitted by double quotes&#xA;	private function getGroupTypeFromNotes(notes)&#xA;		dim parts&#xA;		parts = split(notes,&quot;&quot;&quot;&quot;)&#xA;		getGroupTypeFromNotes = parts(1)&#xA;	end function&#xA;	&#xA;	'sets the GroupType based on the given notes&#xA;	public sub setGroupTypeFromNotes(notes)&#xA;		GroupType = getGroupTypeFromNotes(notes)&#xA;	end sub&#xA;	&#xA;	'gets a dictionary of all groups without the scripts&#xA;	public function getAllGroups()&#xA;		dim allGroups, sqlGet&#xA;		dim queryResult&#xA;		dim resultArray&#xA;		set allGroups = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;		sqlGet = &quot;select s.[ScriptID], s.[ScriptName] AS GroupGUID, s.[Notes], s.[Script] as GroupName &quot; &amp; _&#xA;				&quot; from t_script s &quot; &amp; _&#xA;				&quot; where s.Notes like '&lt;Group Type=&quot; &amp; getWC() &amp; &quot;'&quot;&#xA;		queryResult = Repository.SQLQuery(sqlGet)&#xA;		resultArray = convertQueryResultToArray(queryResult)&#xA;		dim groupId, groupGUID, groupName, notes, scriptGroup&#xA;		dim i&#xA;		For i = LBound(resultArray) To UBound(resultArray)&#xA;			groupId = resultArray(i,0)&#xA;			groupGUID = resultArray(i,1)&#xA;			notes = resultArray(i,2) &#xA;			groupName = resultArray(i,3)&#xA;			if len(notes) &gt; 0 then&#xA;				'first get or create the group&#xA;				if not allGroups.Exists(groupID) then&#xA;					set scriptGroup = new ScriptGroup&#xA;					scriptGroup.Name = groupName&#xA;					scriptGroup.Id = groupId&#xA;					scriptGroup.GUID = groupGUID&#xA;					scriptGroup.setGroupTypeFromNotes notes&#xA;					'add the group to the dictionary&#xA;					allGroups.Add groupID, scriptGroup&#xA;				end if&#xA;			end if&#xA;		next&#xA;		set getAllGroups = allGroups&#xA;	end function&#xA;	&#xA;	'Insert the group in the database&#xA;	public sub Create&#xA;		dim sqlInsert&#xA;		sqlInsert = &quot;insert into t_script (ScriptCategory, ScriptName,Notes, Script) &quot; &amp; _&#xA;					&quot; Values ('&quot; &amp; scriptGroupCategory &amp; &quot;','&quot; &amp; me.GUID &amp; &quot;','&lt;Group Type=&quot;&quot;&quot; &amp; me.GroupType &amp; &quot;&quot;&quot; Notes=&quot;&quot;&quot;&quot;/&gt;','&quot; &amp; me.Name &amp; &quot;')&quot;&#xA;		Repository.Execute sqlInsert&#xA;	end sub&#xA;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="9"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Utils"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="10"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6EE713A9-211C-4236-9415-A782E0C4D688}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;XML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;		'select the rows&#xA;		Dim rowList&#xA;		Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;		Dim rowNode &#xA;		Dim fieldNode&#xA;		arrayCreated = False&#xA;		'loop rows and find fields&#xA;		For Each rowNode In rowList&#xA;			j = 0&#xA;			If (rowNode.HasChildNodes) Then&#xA;				'redim array (only once)&#xA;				If Not arrayCreated Then&#xA;					ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;					arrayCreated = True&#xA;				End If&#xA;				For Each fieldNode In rowNode.ChildNodes&#xA;					'write f&#xA;					result(i, j) = fieldNode.Text&#xA;					j = j + 1&#xA;				Next&#xA;			End If&#xA;			i = i + 1&#xA;		Next&#xA;	end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="11"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7186BAAA-A64A-4d3b-A9E1-B5007952E559}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;!INC Utils.XML&#xA;!INC Utils.SQL&#xA;!INC Utils.FileSystemFolder&#xA;!INC Utils.TextFile&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="12"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7496696C-1068-48ea-8095-D2D980702A21}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SQL&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'returns the SQL wildcard depending on the type of repository&#xA;function getWC()&#xA;	if Repository.RepositoryType = &quot;JET&quot; then&#xA;		getWC = &quot;*&quot;&#xA;	else&#xA;		getWC = &quot;%&quot;&#xA;	end if&#xA;end function&#xA;&#xA;'escapes a literal string so it can be inserted using sql&#xA;function escapeSQLString(inputString)&#xA;	'replace the single quotes with two single quotes for all db types&#xA;	inputString = replace(inputString, &quot;'&quot;,&quot;''&quot;)&#xA;	'dbspecifics&#xA;	select case Repository.RepositoryType&#xA;		case &quot;POSTGRES&quot;&#xA;			' replace backslash &quot;\&quot; by double backslash &quot;\\&quot;&#xA;			inputString = replace(inputString,&quot;\&quot;,&quot;\\&quot;)&#xA;		case &quot;JET&quot;&#xA;			'replace pipe character | by '&amp; chr(124) &amp;'&#xA;			inputString = replace(inputString,&quot;|&quot;, &quot;'&amp; chr(124) &amp;'&quot;)&#xA;	end select&#xA;	escapeSQLString = inputString&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="13"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DED04622-7E82-43e9-8BB1-C5D18A467709}"/>
			<Column name="ScriptAuthor" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;LoadScripts&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Tools\Script Management]&#xA;'[group=Script Management]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;!INC EAScriptLib.VBScript-GUID&#xA;&#xA;' Author: Geert Bellekens&#xA;' Purpose: Loads scripts from the file systems and stores them in Enterprise Architect&#xA;' Date: 2015-12-07&#xA;'&#xA;sub main&#xA;	dim selectedFolder,file, allScripts, allGroups,script, overwriteExisting&#xA;	set selectedFolder = new FileSystemFolder&#xA;	set selectedFolder = selectedFolder.getUserSelectedFolder(&quot;&quot;)&#xA;	overwriteExisting = &quot;undecided&quot;&#xA;	if not selectedFolder is nothing then&#xA;		set allGroups = Nothing&#xA;		set script = new Script&#xA;		'first get all existing scripts and groups&#xA;		set allScripts = Script.getAllScripts(allGroups)&#xA;		'get the scripts from the folder and its subfolders&#xA;		getScriptsFromFolder selectedFolder, allGroups, allScripts, overwriteExisting&#xA;	end if&#xA;end sub&#xA;&#xA;'gets all the scripts from the given folder and its subfolders (if any)&#xA;function getScriptsFromFolder(selectedFolder, allGroups, allScripts, overwriteExisting)&#xA;	dim script, subFolder&#xA;	for each file in selectedFolder.TextFiles&#xA;		Session.Output &quot;FileName: &quot; &amp; file.FileName&#xA;		'Session.Output &quot;Code: &quot; &amp; file.Contents&#xA;		set script = getScriptFromFile(file, allGroups, allScripts,overwriteExisting)&#xA;		if overwriteExisting = vbCancel then&#xA;			exit for&#xA;		end if&#xA;	next&#xA;	'then process subfolders&#xA;	if not overwriteExisting = vbCancel then&#xA;		for each subFolder in selectedFolder.SubFolders&#xA;			getScriptsFromFolder subFolder, allGroups, allScripts, overwriteExisting&#xA;		next&#xA;	end if&#xA;end function&#xA;&#xA;function getScriptFromFile(file, allGroups, allScripts,overwriteExisting)&#xA;	dim script, newScript, foundMatch, newScriptGroupName, group, foundGroup&#xA;	foundMatch = false&#xA;	foundGroup = false&#xA;	set group = nothing&#xA;	set script = Nothing&#xA;	if file.Extension = &quot;vbs&quot; then&#xA;		for each script in allScripts&#xA;			set newScript = new Script&#xA;			newScript.Name = file.FileNameWithoutExtension&#xA;			newScript.Code = file.Contents&#xA;			newScriptGroupName = newScript.GroupInNameCode &#xA;			'if the groupname was not found in the code we use the name of the package&#xA;			if len(newScriptGroupName) = 0 then&#xA;				newScriptGroupName = file.Folder.Name&#xA;			end if&#xA;			'check the name of the script&#xA;			if script.Name = newScript.Name then&#xA;				'check if there is a groupname defined in the file&#xA;				if script.Group.Name = newScriptGroupName then&#xA;					'we have a match&#xA;					foundMatch = true&#xA;					set group = script.Group&#xA;					exit for&#xA;				end if&#xA;			end if&#xA;		next&#xA;		if not foundMatch then &#xA;			'script did not exist yet&#xA;			'figure out if the group exists already&#xA;			for each group in allGroups.Items&#xA;				if group.Name = newScriptGroupName then&#xA;					'found the group&#xA;					'add the group to the new script&#xA;					newScript.Group = group&#xA;					foundGroup = true&#xA;					exit for&#xA;				end if&#xA;			next&#xA;			'if the group doesn't exist yet we have to create it&#xA;			if not foundGroup then&#xA;				set group = new ScriptGroup&#xA;				group.Name = newScriptGroupName&#xA;				group.GUID = GUIDGenerateGUID()&#xA;				group.GroupType = gtNormal&#xA;				'create the Group in the database&#xA;				group.Create&#xA;				'refresh allGroups&#xA;				Session.Output &quot;allGroups.Count before: &quot; &amp; allGroups.Count&#xA;				set allGroups = group.GetAllGroups()&#xA;				Session.Output &quot;allGroups.Count after: &quot; &amp; allGroups.Count&#xA;				'add the group to the script&#xA;				newScript.Group = group&#xA;			end if&#xA;			'Now we have to create the script&#xA;			newScript.GUID = GUIDGenerateGUID()&#xA;			newScript.Create&#xA;			set script = newScript&#xA;		else&#xA;			if overwriteExisting = &quot;undecided&quot; then&#xA;				overwriteExisting = Msgbox(&quot;Do you want to update existing scripts?&quot;, vbYesNoCancel+vbQuestion, &quot;Update existing scripts&quot;)&#xA;				if overwriteExisting = vbYes then&#xA;					script.Code = newScript.Code&#xA;					script.Update&#xA;				end if&#xA;			end if&#xA;		end if&#xA;&#xA;	end if&#xA;	set getScriptFromFile = script&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="14"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B9D0310B-6ADB-4e32-BC6A-6157EAD659C4}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FileSystemFolder&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Include&#xA;&#xA;Const ForReading = 1, ForWriting = 2, ForAppending = 8&#xA;Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0&#xA;&#xA;Class FileSystemFolder&#xA;	Private m_ParentPath&#xA;	Private m_Name&#xA;	&#xA;	' Name property.&#xA;	Public Property Get Name&#xA;	  Name = m_Name&#xA;	End Property&#xA;	Public Property Let Name(value)&#xA;	  m_Name = value&#xA;	End Property&#xA;	&#xA;	' FullPath property.&#xA;	Public Property Get FullPath&#xA;	  FullPath = m_ParentPath &amp; &quot;\&quot; &amp; Name&#xA;	End Property&#xA;	Public Property Let FullPath(value)&#xA;	  dim nameStart&#xA;	  nameStart = InstrRev(value, &quot;\&quot;, -1, 0) &#xA;	  m_ParentPath = left(value,nameStart -1)&#xA;	  m_Name = mid(value,NameStart +1)&#xA;	End Property&#xA;	&#xA;	'parentFolder&#xA;	Public Property Get ParentFolder&#xA;		set ParentFolder = nothing&#xA;		if len(m_ParentPath) &gt; 0 and right(m_ParentPath,2) &lt;&gt; &quot;:\&quot; then&#xA;			set ParentFolder = new FileSystemFolder&#xA;			ParentFolder.FullPath = m_ParentPath&#xA;		end if&#xA;	End Property&#xA;	&#xA;	' TextFiles property&#xA;	Public Property Get TextFiles&#xA;		dim fso, fsoFolder, files, file, result, v_textFile, ts&#xA;		set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;		Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;		if fso.FolderExists(me.FullPath) then&#xA;			Set fsoFolder = fso.GetFolder(me.FullPath)			&#xA;			Set files = fsoFolder.Files&#xA;			For Each file in files&#xA;				set v_textFile = new TextFile&#xA;				v_textFile.Folder = me&#xA;				v_textFile.FileName = file.Name&#xA;				set ts = file.OpenAsTextStream(ForReading, TristateUseDefault)&#xA;				v_textFile.Contents = ts.ReadAll&#xA;				ts.Close&#xA;				result.add v_textFile&#xA;			Next&#xA;		end if&#xA;		set TextFiles = result&#xA;	End Property&#xA;	&#xA;	'SubFolders property&#xA;	public property Get SubFolders&#xA;		Dim fso, result, folders, tempfolder, subfolder&#xA;		set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;		Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;		Set tempfolder = fso.GetFolder(me.FullPath)&#xA;		Set folders = tempfolder.SubFolders&#xA;		For Each folder in folders&#xA;			set subfolder = new FileSystemFolder&#xA;			subFolder.FullPath = folder.Path&#xA;			result.Add subFolder&#xA;		Next&#xA;		set SubFolders = result&#xA;	End Property&#xA;	&#xA;	public function getUserSelectedFolder(startPath)&#xA;		dim folder, shell&#xA;		Set shell  = CreateObject( &quot;Shell.Application&quot; )&#xA;		if len(startPath) &gt; O then&#xA;			Set folder = shell.BrowseForFolder( 0, &quot;Select Folder&quot;, 0,startPath)&#xA;		else&#xA;			Set folder = shell.BrowseForFolder( 0, &quot;Select Folder&quot;, 0)&#xA;		end if&#xA;		if not folder is nothing then&#xA;			set getUserSelectedFolder = New FileSystemFolder&#xA;			getUserSelectedFolder.FullPath = folder.Self.Path &#xA;			Session.Output &quot;folder.Self.Path: &quot; &amp; folder.Self.Path&#xA;		else&#xA;			set getUserSelectedFolder = Nothing&#xA;		end if&#xA;	end function&#xA;	&#xA;	public sub Save()&#xA;		Dim fso&#xA;		Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;		'first check if the path doesn't exist yet&#xA;		if not fso.FolderExists(me.FullPath) and len(me.FullPath) &gt; 1 then&#xA;			if not me.ParentFolder is nothing then&#xA;				me.ParentFolder.Save&#xA;			end if&#xA;			fso.CreateFolder me.FullPath&#xA;		end if&#xA;	end sub&#xA;End Class&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="15"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="16"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
	</DataSet>
</RefData>
